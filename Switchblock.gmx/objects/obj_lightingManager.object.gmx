<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create the list to store the non-dynmaic object points
fixedEndpoints = ds_list_create();
//create the list for dynamic objects
dynamicEndpoints = ds_list_create();

//create the list to store light triangles
trianglePoints = ds_map_create();

angles = ds_list_create();

ds_list_add(fixedEndpoints, instance_create(0, 0, obj_vector));
ds_list_add(fixedEndpoints, instance_create(room_width, 0, obj_vector));
ds_list_add(fixedEndpoints, instance_create(0, room_height, obj_vector));
ds_list_add(fixedEndpoints, instance_create(room_width, room_height, obj_vector));

//loop through all the objects and add them to the list
for(var i = 0; i &lt; instance_number(obj_block); i++)
{
    var object = instance_find(obj_block, i)
    var canAdd = true;
    if(!object_get_physics(object.object_index) || object.object_index == "obj_player" || object.phy_dynamic)
    {
        canAdd = false;
    }
    if(canAdd)
    {
        //add all the points
        var tl = instance_create(object.x, object.y, obj_vector);        
        var tr = instance_create(object.x + (TILE_SIZE * object.image_xscale), object.y, obj_vector);
        var bl = instance_create(object.x, object.y + (TILE_SIZE * object.image_yscale), obj_vector);
        var br = instance_create(object.x + (TILE_SIZE * object.image_xscale), object.y + (TILE_SIZE * object.image_yscale), obj_vector);
        
        ds_list_add(fixedEndpoints, tl);
        ds_list_add(fixedEndpoints, tr);
        ds_list_add(fixedEndpoints, bl);
        ds_list_add(fixedEndpoints, br);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//destroy the lists
ds_list_destroy(fixedEndpoints);
ds_list_destroy(dynamicEndpoints);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update dynamic end points
//clear the dynamic list
for(var i = 0; i &lt; ds_list_size(dynamicEndpoints); i++)
{
    with(ds_list_find_value(dynamicEndpoints, i))
    {
        instance_destroy();
    }    
}
ds_list_clear(dynamicEndpoints);

for(var i = 0; i &lt; instance_number(obj_block); i++)
{
    var object = instance_find(obj_block, i)
    var canAdd = true;
    if(!object_get_physics(object.object_index) || object.object_index == "obj_player" || !object.phy_dynamic)
    {
        canAdd = false;
    }
    if(canAdd)
    {
        //add all the points
        var rotation = object.phy_rotation * (pi / 180);
        var width = TILE_SIZE * object.image_xscale;
        var height = TILE_SIZE * object.image_yscale;
        
        //top left
        var xVal = object.x;
        var yVal = object.y;
        ds_list_add(dynamicEndpoints, instance_create(xVal, yVal, obj_vector));
        
        //top right
        var xVal = object.x + width*cos(rotation);
        var yVal = object.y + height*sin(rotation);
        ds_list_add(dynamicEndpoints, instance_create(xVal, yVal, obj_vector));
        
        //bottom left
        var xVal = object.x - height*sin(rotation);
        var yVal = object.y + height*cos(rotation);
        ds_list_add(dynamicEndpoints, instance_create(xVal, yVal, obj_vector));
        
        //bottom right
        var xVal = object.x + width*cos(rotation) - height*sin(rotation);
        var yVal = object.y + height*sin(rotation) + height*cos(rotation);
        ds_list_add(dynamicEndpoints, instance_create(xVal, yVal, obj_vector));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update the triangles
//set up the angles
var hitPoint = instance_create(0, 0, obj_vector);
for(var i = 0; i &lt; ds_list_size(dynamicEndpoints); i++)
{
    var hitObj = noone;
    var point = ds_list_find_value(dynamicEndpoints, i);
    var angle = point_direction(obj_player.x, obj_player.y, point.x, point.y) * (pi/180);
    
    with(obj_player)
    {
        hitObj = Raycast(angle, room_width + room_height, TILE_SIZE*0.5, obj_block, true, hitPoint)
    }
    if(hitObj != noone)
    {
        point = hitPoint;
    }
    
    ds_list_add(angles, angle);
    ds_map_add(trianglePoints, angle, instance_create(point.x, point.y, obj_vector));
}

for(var i = 0; i &lt; ds_list_size(fixedEndpoints); i++)
{
    var hitObj = noone;
    var point = ds_list_find_value(fixedEndpoints, i);
    var angle = point_direction(obj_player.x, obj_player.y, point.x, point.y) * (pi/180);
    
    with(obj_player)
    {
        hitObj = Raycast(angle, room_width + room_height, TILE_SIZE*0.5, obj_block, true, hitPoint)
    }
    if(hitObj)
    {
        point = hitPoint;
    }
    
    ds_list_add(angles, angle);
    ds_map_add(trianglePoints, angle, instance_create(point.x, point.y, obj_vector));
}

ds_list_sort(angles, true);

//destroy the vector
with(hitPoint) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(0, 0, "instance count: " + string(instance_count));
draw_text(0, string_height("0"), "FPS: " + string(1/DeltaTime()));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for(var i = 0; i &lt; ds_list_size(fixedEndpoints); i++)
{
    var endPoint = ds_list_find_value(fixedEndpoints, i);
    draw_arrow(obj_player.x, obj_player.y, endPoint.x, endPoint.y, 1);   
}

for(var i = 0; i &lt; ds_list_size(dynamicEndpoints); i++)
{
    var endPoint = ds_list_find_value(dynamicEndpoints, i);
    draw_set_colour(c_white);
    draw_arrow(obj_player.x, obj_player.y, endPoint.x, endPoint.y, 1);   
    draw_set_colour(c_black);
}*/

//for(var i = 0; i &lt; ds_list_size(trianglePoints-1); i++)
if(surface_exists(obj_lightMap.lightMap))
{
    surface_set_target(obj_lightMap.lightMap);
}
if(instance_number(obj_player) &gt; 0)
{
    var startX = obj_player.x;
    var startY = obj_player.y;
    //draw the connecting triangle(first-last)
    var angle1 = ds_list_find_value(angles, 0);
    var angle2 = ds_list_find_value(angles, ds_list_size(angles)-1);
    var p1 = ds_map_find_value(trianglePoints, angle1);
    var p2 = ds_map_find_value(trianglePoints, angle2);
    draw_set_blend_mode_ext(bm_one, bm_zero);
    draw_set_alpha(0.0);
    if(!is_undefined(p1) &amp;&amp; !is_undefined(p2))
    {
        draw_triangle_colour(startX, startY, p1.x, p1.y, p2.x, p2.y, c_white, c_white, c_white, false);
    }
    draw_set_blend_mode(bm_normal);
    draw_set_alpha(1.0);
    
    //draw the remaining triangles
    while(!ds_list_empty(angles))
    {
        var angle1 = ds_list_find_value(angles, 0);
        var angle2 = ds_list_find_value(angles, 1);
        var p1 = ds_map_find_value(trianglePoints, angle1);
        var p2 = ds_map_find_value(trianglePoints, angle2);
        draw_set_blend_mode_ext(bm_one, bm_zero);
        draw_set_alpha(0.0);
        if(!is_undefined(p1) &amp;&amp; !is_undefined(p2))
        {
            draw_triangle_colour(startX, startY, p1.x, p1.y, p2.x, p2.y, c_white, c_white, c_white, false);
        }
        draw_set_blend_mode(bm_normal);
        draw_set_alpha(1.0);
        /*with(p1)
        {
            instance_destroy();
        }*/
        ds_list_delete(angles, 0);
    }
    while(!ds_map_empty(trianglePoints))
    {
        var key = ds_map_find_first(trianglePoints);
        with(ds_map_find_value(trianglePoints, key))
        {
            instance_destroy();
        }
        ds_map_delete(trianglePoints, key);
    }
    //ds_map_clear(trianglePoints);        
}
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
